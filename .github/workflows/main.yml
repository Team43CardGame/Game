name: Unity CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run Super-Linter for C#
        id: lint
        uses: super-linter/super-linter@v7.4.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_WORKSPACE: ./Assets/Scripts
          VALIDATE_CSHARP: true
          FILTER_REGEX_EXCLUDE: .*\.meta$
        continue-on-error: true

  test-unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-
      - uses: game-ci/unity-test-runner@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          
        with:
          unityVersion: 6000.1.6f1
          testMode: editmode
          projectPath: .
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          customParameters: -batchmode -nographics
        id: test-unit
      - name: Upload Unit Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Unit-Test-Results
          path: ${{ steps.test-unit.outputs.artifactsPath }}

  test-integration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-
      - uses: game-ci/unity-test-runner@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          unityVersion: 6000.1.6f1
          testMode: playmode
          projectPath: .
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          customParameters: -batchmode -nographics
        id: test-integration
      - name: Upload Integration Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Integration-Test-Results
          path: ${{ steps.test-integration.outputs.artifactsPath }}

  build-windows:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-
      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          unityVersion: 6000.1.6f1
          targetPlatform: StandaloneWindows64
          projectPath: .
          buildName: CardGame
          buildsPath: build/windows
        id: build-windows
      - name: Upload Windows Build
        uses: actions/upload-artifact@v4
        with:
          name: CardGame-Win64
          path: ${{ steps.build-windows.outputs.buildPath }}
      - name: Create Release and Upload Windows Build
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: CardGame-v${{ github.run_number }}-Win64
          files: ${{ steps.build-windows.outputs.buildPath }}
          token: ${{ secrets.GITHUB_TOKEN }}


